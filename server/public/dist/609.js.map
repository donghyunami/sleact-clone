{"version":3,"file":"609.js","mappings":"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","sources":["webpack://sleact-ts-front/./components/InviteChannelModal/index.tsx","webpack://sleact-ts-front/./components/Menu/styles.tsx","webpack://sleact-ts-front/./components/Modal/styles.tsx","webpack://sleact-ts-front/./components/Modal/index.tsx","webpack://sleact-ts-front/./hooks/useSocket.ts","webpack://sleact-ts-front/./layouts/Workspace/styles.tsx","webpack://sleact-ts-front/./components/Menu/index.tsx","webpack://sleact-ts-front/./components/CreateChannelModal/index.tsx","webpack://sleact-ts-front/./components/InviteWorkspaceModal/index.tsx","webpack://sleact-ts-front/./components/DMList/styles.tsx","webpack://sleact-ts-front/./components/ChannelList/index.tsx","webpack://sleact-ts-front/./components/DMList/index.tsx","webpack://sleact-ts-front/./layouts/Workspace/index.tsx"],"sourcesContent":["import Modal from '@components/Modal';\r\nimport useInput from '@hooks/useInput';\r\nimport { Button, Input, Label } from '@pages/SignUp/styles';\r\nimport { IUser } from '@typings/db';\r\nimport fetcher from '@utils/fetcher';\r\nimport axios from 'axios';\r\nimport React, { FC, useCallback } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { toast } from 'react-toastify';\r\nimport useSWR from 'swr';\r\n\r\ninterface Props {\r\n  show: boolean;\r\n  onCloseModal: () => void;\r\n  setShowInviteChannelModal: (flag: boolean) => void;\r\n}\r\nconst InviteChannelModal: FC<Props> = ({\r\n  show,\r\n  onCloseModal,\r\n  setShowInviteChannelModal,\r\n}) => {\r\n  const { workspace, channel } = useParams<{\r\n    workspace: string;\r\n    channel: string;\r\n  }>();\r\n  const [newMember, onChangeNewMember, setNewMember] = useInput('');\r\n  const { data: userData } = useSWR<IUser>('/api/users', fetcher);\r\n  const { mutate: revalidateMembers } = useSWR<IUser[]>(\r\n    userData\r\n      ? `/api/workspaces/${workspace}/channels/일반/members`\r\n      : // `http://localhost:3095/api/workspaces/${workspace}/channels/${channel}/members`\r\n        null,\r\n    fetcher,\r\n  );\r\n  // /api/workspaces/test/channels/undefined/members\r\n  const onInviteMember = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      if (!newMember || !newMember.trim()) {\r\n        return;\r\n      }\r\n      axios\r\n        .post(`/api/workspaces/${workspace}/channels/${channel}/members`, {\r\n          email: newMember,\r\n        })\r\n        .then(() => {\r\n          revalidateMembers();\r\n          setShowInviteChannelModal(false);\r\n          setNewMember('');\r\n        })\r\n        .catch((error) => {\r\n          console.dir(error);\r\n          toast.error(error.response?.data, { position: 'bottom-center' });\r\n        });\r\n    },\r\n    [\r\n      channel,\r\n      newMember,\r\n      revalidateMembers,\r\n      setNewMember,\r\n      setShowInviteChannelModal,\r\n      workspace,\r\n    ],\r\n  );\r\n\r\n  return (\r\n    <Modal show={show} onCloseModal={onCloseModal}>\r\n      <form onSubmit={onInviteMember}>\r\n        <Label id=\"member-label\">\r\n          <span>채널 멤버 초대</span>\r\n          <Input id=\"member\" value={newMember} onChange={onChangeNewMember} />\r\n        </Label>\r\n        <Button type=\"submit\">초대하기</Button>\r\n      </form>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default InviteChannelModal;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const CreateMenu = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  right: 0;\r\n  left: 0;\r\n  bottom: 0;\r\n  z-index: 1000;\r\n\r\n  & > div {\r\n    position: absolute;\r\n    display: inline-block;\r\n    --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\r\n    box-shadow: 0 0 0 1px var(--saf-0), 0 4px 12px 0 rgba(0, 0, 0, 0.12);\r\n    background-color: rgba(var(--sk_foreground_min_solid, 248, 248, 248), 1);\r\n    border-radius: 6px;\r\n    user-select: none;\r\n    min-width: 360px;\r\n    z-index: 512;\r\n    max-height: calc(100vh - 20px);\r\n    color: rgb(29, 28, 29);\r\n  }\r\n`;\r\n\r\nexport const CloseModalButton = styled.button`\r\n  position: absolute;\r\n  right: 10px;\r\n  top: 6px;\r\n  background: transparent;\r\n  border: none;\r\n  font-size: 30px;\r\n  cursor: pointer;\r\n`;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const CreateModal = styled.div`\r\n  position: fixed;\r\n  text-align: center;\r\n  left: 0;\r\n  bottom: 0;\r\n  top: 0;\r\n  right: 0;\r\n  z-index: 1022;\r\n\r\n  & > div {\r\n    margin-top: 200px;\r\n    display: inline-block;\r\n    width: 440px;\r\n    background: white;\r\n    --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\r\n    box-shadow: 0 0 0 1px var(--saf-0), 0 4px 12px 0 rgba(0, 0, 0, 0.12);\r\n    background-color: rgba(var(--sk_foreground_min_solid, 248, 248, 248), 1);\r\n    border-radius: 6px;\r\n    user-select: none;\r\n    max-width: 440px;\r\n    padding: 30px 40px 0;\r\n    z-index: 1012;\r\n    position: relative;\r\n  }\r\n`;\r\n\r\nexport const CloseModalButton = styled.button`\r\n  position: absolute;\r\n  right: 10px;\r\n  top: 6px;\r\n  background: transparent;\r\n  border: none;\r\n  font-size: 30px;\r\n  cursor: pointer;\r\n`;\r\n","import React, { FC, MouseEvent, useCallback } from 'react';\r\nimport { CloseModalButton } from '@components/Menu/styles';\r\nimport { CreateModal } from '@components/Modal/styles';\r\n\r\ninterface Props {\r\n  show: boolean;\r\n  onCloseModal: () => void;\r\n}\r\nconst Modal: FC<Props> = ({ show, children, onCloseModal }) => {\r\n  const stopPropagation = useCallback((e: MouseEvent<HTMLDivElement>) => {\r\n    e.stopPropagation();\r\n  }, []);\r\n\r\n  if (!show) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <CreateModal onClick={onCloseModal}>\r\n      <div onClick={stopPropagation}>\r\n        <CloseModalButton onClick={onCloseModal}>&times;</CloseModalButton>\r\n        {children}\r\n      </div>\r\n    </CreateModal>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import io from 'socket.io-client';\r\nimport { useCallback } from 'react';\r\n\r\nconst backUrl = 'http://localhost:3095';\r\n\r\nconst sockets: { [key: string]: SocketIOClient.Socket } = {};\r\nconst useSocket = (\r\n  workspace?: string,\r\n): [SocketIOClient.Socket | undefined, () => void] => {\r\n  const disconnect = useCallback(() => {\r\n    if (workspace) {\r\n      sockets[workspace].disconnect();\r\n      delete sockets[workspace];\r\n    }\r\n  }, [workspace]);\r\n  if (!workspace) {\r\n    return [undefined, disconnect];\r\n  }\r\n\r\n  if (!sockets[workspace]) {\r\n    // 기존에 저장해놓은 소켓이 없는 경우만 소켓 요청하깅\r\n    sockets[workspace] = io.connect(`${backUrl}/ws-${workspace}`, {\r\n      transports: ['websocket'],\r\n    });\r\n  }\r\n  // 기존에 저장해놓은 소켓이 있다면, 기존에 저장해놓은 소켓 리턴\r\n  return [sockets[workspace], disconnect];\r\n};\r\n\r\nexport default useSocket;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const RightMenu = styled.div`\r\n  float: right;\r\n`;\r\n\r\nexport const Header = styled.header`\r\n  height: 38px;\r\n  background: #350d36;\r\n  color: #ffffff;\r\n  box-shadow: 0 1px 0 0 rgba(255, 255, 255, 0.1);\r\n  padding: 5px;\r\n  text-align: center;\r\n`;\r\n\r\nexport const ProfileImg = styled.img`\r\n  width: 28px;\r\n  height: 28px;\r\n  position: absolute;\r\n  top: 5px;\r\n  right: 16px;\r\n`;\r\n\r\nexport const ProfileModal = styled.div`\r\n  display: flex;\r\n  padding: 20px;\r\n\r\n  & img {\r\n    display: flex;\r\n  }\r\n\r\n  & > div {\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-left: 10px;\r\n  }\r\n\r\n  & #profile-name {\r\n    font-weight: bold;\r\n    display: inline-flex;\r\n  }\r\n\r\n  & #profile-active {\r\n    font-size: 13px;\r\n    display: inline-flex;\r\n  }\r\n`;\r\n\r\nexport const LogOutButton = styled.button`\r\n  border: none;\r\n  width: 100%;\r\n  border-top: 1px solid rgb(29, 28, 29);\r\n  background: transparent;\r\n  display: block;\r\n  height: 33px;\r\n  padding: 5px 20px 5px;\r\n  outline: none;\r\n  cursor: pointer;\r\n`;\r\n\r\nexport const WorkspaceWrapper = styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n`;\r\n\r\nexport const Workspaces = styled.div`\r\n  width: 65px;\r\n  display: inline-flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  background: #3f0e40;\r\n  border-top: 1px solid rgb(82, 38, 83);\r\n  border-right: 1px solid rgb(82, 38, 83);\r\n  vertical-align: top;\r\n  text-align: center;\r\n  padding: 15px 0 0;\r\n`;\r\n\r\nexport const Channels = styled.nav`\r\n  width: 260px;\r\n  display: inline-flex;\r\n  flex-direction: column;\r\n  background: #3f0e40;\r\n  color: rgb(188, 171, 188);\r\n  vertical-align: top;\r\n\r\n  & a {\r\n    padding-left: 36px;\r\n    color: inherit;\r\n    text-decoration: none;\r\n    height: 28px;\r\n    line-height: 28px;\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    &.selected {\r\n      color: white;\r\n    }\r\n  }\r\n\r\n  & .bold {\r\n    color: white;\r\n    font-weight: bold;\r\n  }\r\n\r\n  & .count {\r\n    margin-left: auto;\r\n    background: #cd2553;\r\n    border-radius: 16px;\r\n    display: inline-block;\r\n    font-size: 12px;\r\n    font-weight: 700;\r\n    height: 18px;\r\n    line-height: 18px;\r\n    padding: 0 9px;\r\n    color: white;\r\n    margin-right: 16px;\r\n  }\r\n\r\n  & h2 {\r\n    height: 36px;\r\n    line-height: 36px;\r\n    margin: 0;\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n    font-size: 15px;\r\n  }\r\n`;\r\n\r\nexport const WorkspaceName = styled.button`\r\n  height: 64px;\r\n  line-height: 64px;\r\n  border: none;\r\n  width: 100%;\r\n  text-align: left;\r\n  border-top: 1px solid rgb(82, 38, 83);\r\n  border-bottom: 1px solid rgb(82, 38, 83);\r\n  font-weight: 900;\r\n  font-size: 24px;\r\n  background: transparent;\r\n  text-overflow: ellipsis;\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n  padding: 0;\r\n  padding-left: 16px;\r\n  margin: 0;\r\n  color: white;\r\n  cursor: pointer;\r\n`;\r\n\r\nexport const MenuScroll = styled.div`\r\n  height: calc(100vh - 102px);\r\n  overflow-y: auto;\r\n`;\r\n\r\nexport const WorkspaceModal = styled.div`\r\n  padding: 10px 0 0;\r\n\r\n  & h2 {\r\n    padding-left: 20px;\r\n  }\r\n\r\n  & > button {\r\n    width: 100%;\r\n    height: 28px;\r\n    padding: 4px;\r\n    border: none;\r\n    background: transparent;\r\n    border-top: 1px solid rgb(28, 29, 28);\r\n    cursor: pointer;\r\n\r\n    &:last-of-type {\r\n      border-bottom: 1px solid rgb(28, 29, 28);\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Chats = styled.div`\r\n  flex: 1;\r\n`;\r\n\r\nexport const AddButton = styled.button`\r\n  color: white;\r\n  font-size: 24px;\r\n  display: inline-block;\r\n  width: 40px;\r\n  height: 40px;\r\n  background: transparent;\r\n  border: none;\r\n  cursor: pointer;\r\n`;\r\n\r\nexport const WorkspaceButton = styled.button`\r\n  display: inline-block;\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 10px;\r\n  background: white;\r\n  border: 3px solid #3f0e40;\r\n  margin-bottom: 15px;\r\n  font-size: 18px;\r\n  font-weight: 700;\r\n  color: black;\r\n  cursor: pointer;\r\n`;\r\n","import React, { CSSProperties, FC, MouseEvent, useCallback } from 'react';\r\nimport { CloseModalButton, CreateMenu } from './styles';\r\n\r\ninterface Props {\r\n  style: CSSProperties;\r\n  show: boolean;\r\n  onCloseModal: (e: MouseEvent) => void;\r\n  closeButton?: boolean;\r\n}\r\n\r\nconst Menu: FC<Props> = ({\r\n  children,\r\n  style,\r\n  show,\r\n  onCloseModal,\r\n  closeButton,\r\n}) => {\r\n  const stopPropagation = useCallback((e: MouseEvent<HTMLDivElement>) => {\r\n    e.stopPropagation();\r\n  }, []);\r\n\r\n  if (!show) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <CreateMenu onClick={onCloseModal}>\r\n      <div style={style} onClick={stopPropagation}>\r\n        {closeButton && (\r\n          <CloseModalButton onClick={onCloseModal}>&times;</CloseModalButton>\r\n        )}\r\n        {children}\r\n      </div>\r\n    </CreateMenu>\r\n  );\r\n};\r\n\r\nMenu.defaultProps = {\r\n  closeButton: true,\r\n};\r\n\r\nexport default Menu;\r\n","import Modal from '@components/Modal';\r\nimport useInput from '@hooks/useInput';\r\nimport { Button, Input, Label } from '@pages/SignUp/styles';\r\nimport { IChannel, IUser } from '@typings/db';\r\nimport fetcher from '@utils/fetcher';\r\nimport axios from 'axios';\r\nimport React, { useCallback, useEffect, VFC } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport useSWR from 'swr';\r\n\r\ninterface Props {\r\n  show: boolean;\r\n  onCloseModal: () => void;\r\n  setShowCreateChannelModal: (flag: boolean) => void;\r\n}\r\n\r\nconst CreateChannelModal: VFC<Props> = ({\r\n  show,\r\n  onCloseModal,\r\n  setShowCreateChannelModal,\r\n}) => {\r\n  const [newChannel, onChangeNewChannel, setNewChannel] = useInput('');\r\n  const { workspace, channel } = useParams<{\r\n    workspace: string;\r\n    channel: string;\r\n  }>();\r\n\r\n  const { data: userData } = useSWR<IUser | false>('/api/users', fetcher, {\r\n    dedupingInterval: 10000,\r\n  });\r\n\r\n  const { data: channelData, mutate: mutateChannelData } = useSWR<IChannel[]>(\r\n    userData ? `/api/workspaces/${workspace}/channels` : null,\r\n    fetcher,\r\n    {\r\n      dedupingInterval: 10000,\r\n    },\r\n  );\r\n\r\n  useEffect(() => {\r\n    toast.configure();\r\n  }, []);\r\n\r\n  const onCreateChannel = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      console.log('채널 생성하기');\r\n      if (!newChannel || !newChannel.trim()) {\r\n        return;\r\n      }\r\n      axios\r\n        .post(\r\n          `/api/workspaces/${workspace}/channels`,\r\n          {\r\n            name: newChannel,\r\n          },\r\n          {\r\n            withCredentials: true,\r\n          },\r\n        )\r\n        .then(() => {\r\n          setShowCreateChannelModal(false);\r\n          mutateChannelData();\r\n          setNewChannel('');\r\n        })\r\n        .catch((error) => {\r\n          toast.error(error.response?.data, { position: 'bottom-center' });\r\n          console.dir(error);\r\n        });\r\n    },\r\n    [newChannel],\r\n  );\r\n  return (\r\n    <Modal show={show} onCloseModal={onCloseModal}>\r\n      <form onSubmit={onCreateChannel}>\r\n        <Label id=\"workspace-label\">\r\n          <span>채널</span>\r\n          <Input\r\n            id=\"wordspace\"\r\n            value={newChannel}\r\n            onChange={onChangeNewChannel}\r\n          />\r\n        </Label>\r\n        <Button type=\"submit\">생성하기</Button>\r\n      </form>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CreateChannelModal;\r\n","import Modal from '@components/Modal';\r\nimport useInput from '@hooks/useInput';\r\nimport { Button, Input, Label } from '@pages/SignUp/styles';\r\nimport { IUser } from '@typings/db';\r\nimport fetcher from '@utils/fetcher';\r\nimport axios from 'axios';\r\nimport React, { FC, useCallback } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { toast } from 'react-toastify';\r\nimport useSWR from 'swr';\r\n\r\ninterface Props {\r\n  show: boolean;\r\n  onCloseModal: () => void;\r\n  setShowInviteWorkspaceModal: (flag: boolean) => void;\r\n}\r\nconst InviteWorkspaceModal: FC<Props> = ({\r\n  show,\r\n  onCloseModal,\r\n  setShowInviteWorkspaceModal,\r\n}) => {\r\n  const { workspace } = useParams<{ workspace: string; channel: string }>();\r\n  const [newMember, onChangeNewMember, setNewMember] = useInput('');\r\n  const { data: userData } = useSWR<IUser>('/api/users', fetcher);\r\n  const { mutate: mutateMember } = useSWR<IUser[]>(\r\n    userData ? `/api/workspaces/${workspace}/members` : null,\r\n    fetcher,\r\n  );\r\n\r\n  const onInviteMember = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      if (!newMember || !newMember.trim()) {\r\n        return;\r\n      }\r\n      axios\r\n        .post(\r\n          `/api/workspaces/${workspace}/members`,\r\n          {\r\n            email: newMember,\r\n          },\r\n          { withCredentials: true },\r\n        )\r\n        .then(({ data }) => {\r\n          mutateMember(data, false);\r\n          setShowInviteWorkspaceModal(false);\r\n          setNewMember('');\r\n        })\r\n        .catch((error) => {\r\n          console.dir(error);\r\n          toast.error(error.response?.data, { position: 'bottom-center' });\r\n        });\r\n    },\r\n    [\r\n      newMember,\r\n      workspace,\r\n      mutateMember,\r\n      setShowInviteWorkspaceModal,\r\n      setNewMember,\r\n    ],\r\n  );\r\n\r\n  return (\r\n    <Modal show={show} onCloseModal={onCloseModal}>\r\n      <form onSubmit={onInviteMember}>\r\n        <Label id=\"member-label\">\r\n          <span>이메일</span>\r\n          <Input\r\n            id=\"member\"\r\n            type=\"email\"\r\n            value={newMember}\r\n            onChange={onChangeNewMember}\r\n          />\r\n        </Label>\r\n        <Button type=\"submit\">초대하기</Button>\r\n      </form>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default InviteWorkspaceModal;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const CollapseButton = styled.button<{ collapse: boolean }>`\r\n  background: transparent;\r\n  border: none;\r\n  width: 26px;\r\n  height: 26px;\r\n  display: inline-flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  color: white;\r\n  margin-left: 10px;\r\n  cursor: pointer;\r\n\r\n  ${({ collapse }) =>\r\n    collapse &&\r\n    `\r\n    & i {\r\n      transform: none;\r\n    }\r\n  `};\r\n`;\r\n","// import useSocket from '@hooks/useSocket';\r\nimport { CollapseButton } from '@components/DMList/styles';\r\nimport { IChannel, IUser } from '@typings/db';\r\nimport fetcher from '@utils/fetcher';\r\nimport React, { VFC, useCallback, useState } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { NavLink } from 'react-router-dom';\r\nimport useSWR from 'swr';\r\n\r\nconst ChannelList: VFC = () => {\r\n  const { workspace } = useParams<{ workspace?: string }>();\r\n  // const [socket] = useSocket(workspace);\r\n\r\n  const {\r\n    data: userData,\r\n    error,\r\n    mutate,\r\n  } = useSWR<IUser>('/api/users', fetcher, {\r\n    dedupingInterval: 2000, // 2초\r\n  });\r\n\r\n  const { data: channelData } = useSWR<IChannel[]>(\r\n    userData ? `/api/workspaces/${workspace}/channels` : null,\r\n    fetcher,\r\n  );\r\n  const [channelCollapse, setChannelCollapse] = useState(false);\r\n\r\n  const toggleChannelCollapse = useCallback(() => {\r\n    setChannelCollapse((prev) => !prev);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <h2> \r\n        <CollapseButton\r\n          collapse={channelCollapse}\r\n          onClick={toggleChannelCollapse}\r\n        >\r\n          <i\r\n            className=\"c-icon p-channel_sidebar__section_heading_expand p-channel_sidebar__section_heading_expand--show_more_feature c-icon--caret-right c-icon--inherit c-icon--inline\"\r\n            data-qa=\"channel-section-collapse\"\r\n            aria-hidden=\"true\"\r\n          />\r\n        </CollapseButton>\r\n        <span>Channels</span>\r\n      </h2>\r\n      <div>\r\n        {!channelCollapse &&\r\n          channelData?.map((channel) => {\r\n            return (\r\n              <NavLink\r\n                key={channel.name}\r\n                activeClassName=\"selected\"\r\n                to={`/workspace/${workspace}/channel/${channel.name}`}\r\n              >\r\n                <span># {channel.name}</span>\r\n              </NavLink>\r\n            );\r\n          })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChannelList;\r\n","import React, { VFC, useCallback, useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { CollapseButton } from '@components/DMList/styles';\r\nimport useSocket from '@hooks/useSocket';\r\nimport fetcher from '@utils/fetcher';\r\nimport { IUser, IUserWithOnline } from '@typings/db';\r\nimport useSWR from 'swr';\r\n\r\nconst DMList: VFC = () => {\r\n  const { workspace } = useParams<{ workspace?: string }>();\r\n  const {\r\n    data: userData,\r\n    error,\r\n    mutate,\r\n  } = useSWR<IUser>('/api/users', fetcher, {\r\n    dedupingInterval: 2000, // 2초\r\n  });\r\n  const { data: memberData } = useSWR<IUserWithOnline[]>(\r\n    userData ? `/api/workspaces/${workspace}/members` : null,\r\n    fetcher,\r\n  );\r\n  const [socket] = useSocket(workspace);\r\n  const [channelCollapse, setChannelCollapse] = useState(false);\r\n  const [onlineList, setOnlineList] = useState<number[]>([]);\r\n\r\n  const toggleChannelCollapse = useCallback(() => {\r\n    setChannelCollapse((prev) => !prev);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log('DMList: workspace 바꼈다', workspace);\r\n    setOnlineList([]);\r\n  }, [workspace]);\r\n\r\n  useEffect(() => {\r\n    socket?.on('onlineList', (data: number[]) => {\r\n      setOnlineList(data);\r\n    });\r\n    // socket?.on('dm', onmessage);\r\n    // console.log('socket on dm', socket?.hasListeners('dm'), socket);\r\n    return () => {\r\n      // socket?.off('dm', onMessage);\r\n      // console.log('socket off dm', socket?.hasListeners('dm'));\r\n      socket?.off('onlineList');\r\n    };\r\n  }, [socket]);\r\n\r\n  return (\r\n    <>\r\n      <h2>\r\n        <CollapseButton\r\n          collapse={channelCollapse}\r\n          onClick={toggleChannelCollapse}\r\n        >\r\n          <i\r\n            className=\"c-icon p-channel_sidebar__section_heading_expand p-channel_sidebar__section_heading_expand--show_more_feature c-icon--caret-right c-icon--inherit c-icon--inline\"\r\n            data-qa=\"channel-section-collapse\"\r\n            aria-hidden=\"true\"\r\n          />\r\n        </CollapseButton>\r\n        <span>Direct Messages</span>\r\n      </h2>\r\n      <div>\r\n        {!channelCollapse &&\r\n          memberData?.map((member) => {\r\n            const isOnline = onlineList.includes(member.id);\r\n            return (\r\n              <NavLink\r\n                key={member.id}\r\n                activeClassName=\"selected\"\r\n                to={`/workspace/${workspace}/dm/${member.id}`}\r\n              >\r\n                <i\r\n                  className={`c-icon p-channel_sidebar__presence_icon p-channel_sidebar__presence_icon--dim_enabled c-presence ${\r\n                    isOnline\r\n                      ? 'c-presence--active c-icon--presence-online'\r\n                      : 'c-icon--presence-offline'\r\n                  }`}\r\n                  aria-hidden=\"true\"\r\n                  data-qa=\"presence_indicator\"\r\n                  data-qa-presence-self=\"false\"\r\n                  data-qa-presence-active=\"false\"\r\n                  data-qa-presence-dnd=\"false\"\r\n                />\r\n                <span>{member.nickname}</span>\r\n                {member.id === userData?.id && <span>(나)</span>}\r\n              </NavLink>\r\n            );\r\n          })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DMList;\r\n","import React, {\r\n  MouseEvent,\r\n  useCallback,\r\n  useEffect,\r\n  useState,\r\n  VFC,\r\n} from 'react';\r\nimport { Redirect, Switch, Route, Link, useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport useSWR from 'swr';\r\nimport gravatar from 'gravatar';\r\nimport loadable from '@loadable/component';\r\nimport fetcher from '@utils/fetcher';\r\nimport {\r\n  AddButton,\r\n  Channels,\r\n  Chats,\r\n  Header,\r\n  LogOutButton,\r\n  MenuScroll,\r\n  ProfileImg,\r\n  ProfileModal,\r\n  RightMenu,\r\n  WorkspaceButton,\r\n  WorkspaceModal,\r\n  WorkspaceName,\r\n  Workspaces,\r\n  WorkspaceWrapper,\r\n} from './styles';\r\nimport Menu from '@components/Menu';\r\nimport { IUser, IWorkspace, IChannel } from '@typings/db';\r\nimport { Button, Input, Label } from '@pages/SignUp/styles';\r\nimport useInput from '@hooks/useInput';\r\nimport Modal from '@components/Modal';\r\nimport CreateChannelModal from '@components/CreateChannelModal';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport InviteWorkspaceModal from '@components/InviteWorkspaceModal';\r\nimport InviteChannelModal from '@components/InviteChannelModal';\r\n\r\nconst Channel = loadable(() => import('@pages/Channel'));\r\nconst DirectMessage = loadable(() => import('@pages/DirectMessage'));\r\nimport ChannelList from '@components/ChannelList';\r\nimport DMList from '@components/DMList';\r\nimport useSocket from '@hooks/useSocket';\r\n\r\nconst Workspace: VFC = () => {\r\n  const [showUserMenu, setShowUserMenu] = useState(false);\r\n  const [showCreateWorkSpaceModal, setShowCreateWorkSpaceModal] =\r\n    useState(false);\r\n  const [showInviteWorkspaceModal, setShowInviteWorkspaceModal] =\r\n    useState(false);\r\n  const [showWorkspaceModal, setShowWorkspaceModal] = useState(false);\r\n  const [showInviteChannelModal, setShowInviteChannelModal] = useState(false);\r\n  const [showCreateChannelModal, setShowCreateChannelModal] = useState(false);\r\n  const [newWorkspace, onChangeNewWorkspace, setNewWorkspace] = useInput('');\r\n  const [newUrl, onChangeNewUrl, setNewUrl] = useInput('');\r\n\r\n  const { workspace, channel } = useParams<{\r\n    workspace: string;\r\n    channel: string;\r\n  }>();\r\n\r\n  const {\r\n    data: userData,\r\n    error,\r\n    mutate,\r\n  } = useSWR<IUser | false>('/api/users', fetcher, {\r\n    dedupingInterval: 10000,\r\n  });\r\n\r\n  const { data: channelData } = useSWR<IChannel[]>(\r\n    userData ? `/api/workspaces/${workspace}/channels` : null,\r\n    fetcher,\r\n  );\r\n\r\n  const { data: memberData } = useSWR<IChannel[]>(\r\n    userData ? `/api/workspaces/${workspace}/members` : null,\r\n    fetcher,\r\n  );\r\n\r\n  const [socket, disconnect] = useSocket(workspace);\r\n\r\n  useEffect(() => {\r\n    toast.configure();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (channelData && userData && socket) {\r\n      console.log('socket', socket);\r\n      socket.emit('login', {\r\n        id: userData.id,\r\n        channels: channelData.map((v) => v.id),\r\n      });\r\n    }\r\n  }, [channelData, userData]);\r\n\r\n  // 소켓 연결 끊기\r\n  useEffect(() => {\r\n    return () => {\r\n      disconnect();\r\n    };\r\n  }, [workspace, disconnect]);\r\n\r\n  const onLogout = useCallback(() => {\r\n    axios\r\n      .post('/api/users/logout', null, {\r\n        withCredentials: true,\r\n      })\r\n      .then(() => {\r\n        // data에 false로 지정해서 로그아웃하기\r\n        mutate(false, false);\r\n      });\r\n  }, []);\r\n\r\n  const onCloseUserProfile = useCallback((e) => {\r\n    e.stopPropagation();\r\n    setShowUserMenu(false);\r\n  }, []);\r\n\r\n  const onClickUserProfile = useCallback((e: MouseEvent<HTMLSpanElement>) => {\r\n    e.stopPropagation();\r\n    setShowUserMenu((prev) => !prev);\r\n  }, []);\r\n\r\n  const onClickCreateWorkspace = useCallback((e) => {\r\n    setShowCreateWorkSpaceModal(true);\r\n  }, []);\r\n\r\n  const onCreateWorkspace = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n\r\n      // if (!newWorkspace || !newWorkspace.trim()) return;\r\n      // if (!newUrl || !newUrl.trim()) return;\r\n\r\n      if (!newWorkspace || !newWorkspace.trim() || !newUrl || !newUrl.trim()) {\r\n        alert('워크스페이 이름 또는 url를 입력해주세요!');\r\n        return;\r\n      }\r\n\r\n      axios\r\n        .post(\r\n          '/api/workspaces',\r\n          {\r\n            workspace: newWorkspace,\r\n            url: newUrl,\r\n          },\r\n          {\r\n            withCredentials: true,\r\n          },\r\n        )\r\n        .then(() => {\r\n          mutate();\r\n          setShowCreateWorkSpaceModal(false);\r\n          setNewWorkspace('');\r\n          setNewUrl('');\r\n        })\r\n        .catch((error) => {\r\n          console.dir(error.response.data);\r\n          toast.error(error.response?.data, { position: 'bottom-center' });\r\n        });\r\n    },\r\n    [newWorkspace, newUrl],\r\n  );\r\n\r\n  const onCloseModal = useCallback(() => {\r\n    setShowCreateWorkSpaceModal(false);\r\n    setShowCreateChannelModal(false);\r\n    setShowInviteWorkspaceModal(false);\r\n    setShowInviteChannelModal(false);\r\n\r\n    setNewWorkspace('');\r\n    setNewUrl('');\r\n  }, []);\r\n\r\n  const toggleWorkspaceModal = useCallback(() => {\r\n    setShowWorkspaceModal((prev) => !prev);\r\n  }, []);\r\n\r\n  const onClickAddChannel = useCallback(() => {\r\n    setShowCreateChannelModal(true);\r\n  }, []);\r\n\r\n  const onClickInviteWorkspace = useCallback(() => {\r\n    setShowInviteWorkspaceModal(true);\r\n  }, []);\r\n\r\n  // 로딩중 처리\r\n  if (userData === undefined) {\r\n    return <div>로딩중...</div>;\r\n  }\r\n\r\n  if (!userData) {\r\n    // (로그아웃을 해서) 로그인되지 않은 상태이면 로그인 페이지로 이동\r\n    return <Redirect to=\"/login\" />;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {userData && (\r\n        <Header>\r\n          <RightMenu>\r\n            <span onClick={onClickUserProfile}>\r\n              <ProfileImg\r\n                src={gravatar.url(userData.email, { s: '28px', d: 'retro' })}\r\n                alt={userData.nickname}\r\n              />\r\n              {showUserMenu && (\r\n                <Menu\r\n                  style={{ right: 0, top: 38 }}\r\n                  show={showUserMenu}\r\n                  onCloseModal={onCloseUserProfile}\r\n                >\r\n                  <ProfileModal>\r\n                    <img\r\n                      src={gravatar.url(userData.email, {\r\n                        s: '36px',\r\n                        d: 'retro',\r\n                      })}\r\n                      alt={userData.nickname}\r\n                    />\r\n                    <div>\r\n                      <span id=\"profile-name\">{userData.nickname}</span>\r\n                      <span id=\"profile-active\">Active</span>\r\n                    </div>\r\n                  </ProfileModal>\r\n                  <LogOutButton onClick={onLogout}>로그아웃</LogOutButton>\r\n                </Menu>\r\n              )}\r\n            </span>\r\n          </RightMenu>\r\n        </Header>\r\n      )}\r\n      {userData && (\r\n        <WorkspaceWrapper>\r\n          <Workspaces>\r\n            {userData?.Workspaces?.map((ws: IWorkspace) => (\r\n              <Link key={ws.id} to={`/workspace/${ws.url}/channel/일반`}>\r\n                <WorkspaceButton>\r\n                  {ws.name.slice(0, 1).toUpperCase()}\r\n                </WorkspaceButton>\r\n              </Link>\r\n            ))}\r\n            {/* 워크스페이스 생성 */}\r\n            <AddButton onClick={onClickCreateWorkspace}>+</AddButton>\r\n          </Workspaces>\r\n          <Channels>\r\n            <WorkspaceName onClick={toggleWorkspaceModal}>Select</WorkspaceName>\r\n            <MenuScroll>\r\n              <Menu\r\n                show={showWorkspaceModal}\r\n                onCloseModal={toggleWorkspaceModal}\r\n                style={{ top: 95, left: 80 }}\r\n              >\r\n                <WorkspaceModal>\r\n                  <h2>Sleact</h2>\r\n                  <button onClick={onClickInviteWorkspace}>\r\n                    워크스페이스에 사용자 초대\r\n                  </button>\r\n                  <button onClick={onClickAddChannel}>채널만들기</button>\r\n                  <button onClick={onLogout}>로그아웃</button>\r\n                </WorkspaceModal>\r\n              </Menu>\r\n              <ChannelList />\r\n              <DMList />\r\n            </MenuScroll>\r\n          </Channels>\r\n          <Chats>\r\n            <Switch>\r\n              <Route\r\n                path=\"/workspace/:workspace/channel/:channel\"\r\n                component={Channel}\r\n              />\r\n              <Route\r\n                path=\"/workspace/:workspace/dm/:id\"\r\n                component={DirectMessage}\r\n              />\r\n            </Switch>\r\n          </Chats>\r\n        </WorkspaceWrapper>\r\n      )}\r\n\r\n      <Modal show={showCreateWorkSpaceModal} onCloseModal={onCloseModal}>\r\n        <form onSubmit={onCreateWorkspace}>\r\n          <Label id=\"workspace-label\">\r\n            <span>워크스페이스 이름</span>\r\n            <Input\r\n              id=\"wordspace\"\r\n              value={newWorkspace}\r\n              onChange={onChangeNewWorkspace}\r\n            />\r\n          </Label>\r\n          <Label id=\"workspace-url-label\">\r\n            <span>워크스페이스 url</span>\r\n            <Input id=\"wordspace\" value={newUrl} onChange={onChangeNewUrl} />\r\n          </Label>\r\n          <Button type=\"submit\">생성하기</Button>\r\n        </form>\r\n      </Modal>\r\n      <CreateChannelModal\r\n        show={showCreateChannelModal}\r\n        onCloseModal={onCloseModal}\r\n        setShowCreateChannelModal={setShowCreateChannelModal}\r\n      />\r\n      <InviteWorkspaceModal\r\n        show={showInviteWorkspaceModal}\r\n        onCloseModal={onCloseModal}\r\n        setShowInviteWorkspaceModal={setShowInviteWorkspaceModal}\r\n      />\r\n      <InviteChannelModal\r\n        show={showInviteChannelModal}\r\n        onCloseModal={onCloseModal}\r\n        setShowInviteChannelModal={setShowInviteChannelModal}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Workspace;\r\n"],"names":["show","onCloseModal","setShowInviteChannelModal","workspace","channel","useParams","newMember","onChangeNewMember","setNewMember","useInput","data","userData","useSWR","fetcher","mutate","revalidateMembers","onInviteMember","useCallback","e","preventDefault","trim","axios","email","then","catch","error","console","dir","toast","response","position","onSubmit","id","value","onChange","type","CreateMenu","CloseModalButton","CreateModal","children","stopPropagation","onClick","sockets","disconnect","io","transports","undefined","RightMenu","Header","ProfileImg","ProfileModal","LogOutButton","WorkspaceWrapper","Workspaces","Channels","WorkspaceName","MenuScroll","WorkspaceModal","Chats","AddButton","WorkspaceButton","Menu","style","closeButton","defaultProps","setShowCreateChannelModal","newChannel","onChangeNewChannel","setNewChannel","dedupingInterval","channelData","mutateChannelData","useEffect","onCreateChannel","log","name","withCredentials","Modal","setShowInviteWorkspaceModal","mutateMember","CollapseButton","collapse","channelCollapse","setChannelCollapse","useState","toggleChannelCollapse","prev","className","map","key","activeClassName","to","memberData","socket","useSocket","onlineList","setOnlineList","on","off","member","isOnline","includes","nickname","Channel","loadable","DirectMessage","showUserMenu","setShowUserMenu","showCreateWorkSpaceModal","setShowCreateWorkSpaceModal","showInviteWorkspaceModal","showWorkspaceModal","setShowWorkspaceModal","showInviteChannelModal","showCreateChannelModal","newWorkspace","onChangeNewWorkspace","setNewWorkspace","newUrl","onChangeNewUrl","setNewUrl","emit","channels","v","onLogout","onCloseUserProfile","onClickUserProfile","onClickCreateWorkspace","onCreateWorkspace","url","alert","toggleWorkspaceModal","onClickAddChannel","onClickInviteWorkspace","src","gravatar","s","d","alt","right","top","ws","slice","toUpperCase","left","path","component","InviteChannelModal"],"sourceRoot":""}
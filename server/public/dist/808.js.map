{"version":3,"file":"808.js","mappings":"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","sources":["webpack://sleact-ts-front/./pages/Channel/index.tsx"],"sourcesContent":["import ChatBox from '@components/ChatBox';\r\nimport ChatList from '@components/ChatList';\r\nimport InviteChannelModal from '@components/InviteChannelModal';\r\nimport useInput from '@hooks/useInput';\r\nimport useSocket from '@hooks/useSocket';\r\nimport { Container, DragOver, Header } from '@pages/Channel/styles';\r\nimport { IChannel, IChat, IUser } from '@typings/db';\r\nimport fetcher from '@utils/fetcher';\r\nimport makeSection from '@utils/makeSection';\r\nimport axios from 'axios';\r\nimport React, { useCallback, useEffect, useRef, useState, VFC } from 'react';\r\nimport Scrollbars from 'react-custom-scrollbars-2';\r\nimport { useParams } from 'react-router';\r\nimport { Redirect } from 'react-router-dom';\r\nimport useSWR from 'swr';\r\nimport useSWRInfinite from 'swr/infinite';\r\n\r\nconst PAGE_SIZE = 20;\r\nconst Channel = () => {\r\n  const { workspace, channel } = useParams<{\r\n    workspace: string;\r\n    channel: string;\r\n  }>();\r\n  const { data: userData } = useSWR(`/api/users`, fetcher);\r\n  const { data: channelsData } = useSWR<IChannel[]>(\r\n    `/api/workspaces/${workspace}/channels`,\r\n    fetcher,\r\n  );\r\n  const channelData = channelsData?.find((v) => v.name === channel);\r\n  const {\r\n    data: chatData,\r\n    mutate: mutateChat,\r\n    setSize,\r\n  } = useSWRInfinite<IChat[]>(\r\n    (index: number) =>\r\n      `/api/workspaces/${workspace}/channels/${channel}/chats?perPage=${PAGE_SIZE}&page=${\r\n        index + 1\r\n      }`,\r\n    fetcher,\r\n    {\r\n      onSuccess(data) {\r\n        if (data?.length === 1) {\r\n          setTimeout(() => {\r\n            scrollbarRef.current?.scrollToBottom();\r\n          }, 100);\r\n        }\r\n      },\r\n    },\r\n  );\r\n\r\n  const { data: channelMembersData } = useSWR<IUser[]>(\r\n    userData\r\n      ? `/api/workspaces/${workspace}/channels/${channel}/members`\r\n      : null,\r\n    fetcher,\r\n  );\r\n\r\n  const [showInviteChannelModal, setShowInviteChannelModal] = useState(false);\r\n  const [dragOver, setDragOver] = useState(false);\r\n  const [chat, onChangeChat, setChat] = useInput('');\r\n  const [socket] = useSocket(workspace); // 소켓 연결를 위한\r\n  const scrollbarRef = useRef<Scrollbars>(null);\r\n\r\n  const isEmpty = chatData?.[0]?.length === 0;\r\n  const isReachingEnd =\r\n    isEmpty ||\r\n    (chatData && chatData[chatData.length - 1]?.length < 20) ||\r\n    false;\r\n\r\n  const onSubmitForm = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      console.log('submit');\r\n      console.log('chat', chat);\r\n      if (chat?.trim() && chatData && channelData) {\r\n        // console.log('메시지 전송');\r\n        const savedChat = chat;\r\n        mutateChat((prevChatData) => {\r\n          // optimistic ui를 위해  mutate(ChatData) 변경\r\n          prevChatData?.[0].unshift({\r\n            id: (chatData[0][0]?.id || 0) + 1,\r\n            content: savedChat,\r\n            UserId: userData.id,\r\n            User: userData,\r\n            ChannelId: channelData.id,\r\n            Channel: channelData,\r\n            createdAt: new Date(),\r\n          });\r\n          return prevChatData;\r\n        }, false).then(() => {\r\n          setChat('');\r\n          // 채팅시 스크롤바 제일 아래로\r\n          scrollbarRef.current?.scrollToBottom();\r\n        });\r\n        axios\r\n          .post(`/api/workspaces/${workspace}/channels/${channel}/chats`, {\r\n            content: chat,\r\n          })\r\n          .then(() => {\r\n            mutateChat(); // 서버측에 채팅을 등록하고 받아옴\r\n          })\r\n          .catch(console.error);\r\n      }\r\n    },\r\n    [chat, chatData, userData, channelData, workspace, channel],\r\n  );\r\n\r\n  const onMessage = useCallback(\r\n    (data: IChat) => {\r\n      if (\r\n        data.Channel.name === channel &&\r\n        (data.content.startsWith('uploads\\\\') || data.UserId !== userData?.id)\r\n      ) {\r\n        // 채널 데이터가 내 채널명과 같은지\r\n        // 보내는 사람의 id가 내가 아닌지\r\n        mutateChat((chatData) => {\r\n          chatData?.[0].unshift(data);\r\n          return chatData;\r\n        }, false).then(() => {\r\n          if (scrollbarRef.current) {\r\n            if (\r\n              scrollbarRef.current.getScrollHeight() <\r\n              scrollbarRef.current.getClientHeight() +\r\n                scrollbarRef.current.getScrollTop() +\r\n                150\r\n            ) {\r\n              console.log('scrollToBottom!', scrollbarRef.current?.getValues());\r\n              setTimeout(() => {\r\n                scrollbarRef.current?.scrollToBottom();\r\n              }, 100);\r\n            }\r\n          }\r\n        });\r\n      }\r\n    },\r\n    [channel, userData],\r\n  );\r\n\r\n  // DM 채팅하기\r\n  useEffect(() => {\r\n    socket?.on('message', onMessage);\r\n    return () => {\r\n      socket?.off('message', onMessage);\r\n    };\r\n  }, [socket, onMessage]);\r\n\r\n  // 로딩시 스크롤바 제일 아래로\r\n  useEffect(() => {\r\n    if (chatData?.length === 1) {\r\n      scrollbarRef.current?.scrollToBottom();\r\n    }\r\n  }, [chatData]);\r\n\r\n  const onClickInviteChannel = useCallback(() => {\r\n    setShowInviteChannelModal(true);\r\n  }, []);\r\n\r\n  const onCloseModal = useCallback(() => {\r\n    setShowInviteChannelModal(false);\r\n  }, []);\r\n\r\n  const onDrop = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      console.log(e);\r\n      const formData = new FormData();\r\n      if (e.dataTransfer.items) {\r\n        // Use DataTransferItemList interface to access the file(s)\r\n        for (let i = 0; i < e.dataTransfer.items.length; i++) {\r\n          // If dropped items aren't files, reject them\r\n          console.log(e.dataTransfer.items[i]);\r\n          if (e.dataTransfer.items[i].kind === 'file') {\r\n            const file = e.dataTransfer.items[i].getAsFile();\r\n            console.log(e, '.... file[' + i + '].name = ' + file.name);\r\n            formData.append('image', file);\r\n          }\r\n        }\r\n      } else {\r\n        // Use DataTransfer interface to access the file(s)\r\n        for (let i = 0; i < e.dataTransfer.files.length; i++) {\r\n          console.log(\r\n            e,\r\n            '... file[' + i + '].name = ' + e.dataTransfer.files[i].name,\r\n          );\r\n          formData.append('image', e.dataTransfer.files[i]);\r\n        }\r\n      }\r\n      axios\r\n        .post(\r\n          `/api/workspaces/${workspace}/channels/${channel}/images`,\r\n          formData,\r\n        )\r\n        .then(() => {\r\n          setDragOver(false);\r\n          localStorage.setItem(\r\n            `${workspace}-${channel}`,\r\n            new Date().getTime().toString(),\r\n          );\r\n        });\r\n    },\r\n    [workspace, channel],\r\n  );\r\n\r\n  const onDragOver = useCallback((e) => {\r\n    e.preventDefault();\r\n    console.log(e);\r\n    setDragOver(true);\r\n  }, []);\r\n\r\n  if (channelsData && !channelData) {\r\n    return <Redirect to={`/workspace/${workspace}/channel/일반`} />;\r\n  }\r\n\r\n  const chatSections = makeSection(chatData ? chatData.flat().reverse() : []);\r\n\r\n  return (\r\n    <Container onDrop={onDrop} onDragOver={onDragOver}>\r\n      <Header>\r\n        <span>#{channel}</span>\r\n        <div className=\"header-right\">\r\n          <span>{channelMembersData?.length}</span>\r\n          <button\r\n            onClick={onClickInviteChannel}\r\n            className=\"c-button-unstyled p-ia__view_header__button\"\r\n            aria-label=\"Add people to #react-native\"\r\n            data-sk=\"tooltip_parent\"\r\n            type=\"button\"\r\n          >\r\n            <i\r\n              className=\"c-icon p-ia__view_header__button_icon c-icon--add-user\"\r\n              aria-hidden=\"true\"\r\n            />\r\n          </button>\r\n        </div>\r\n      </Header>\r\n      <ChatList\r\n        chatSections={chatSections}\r\n        scrollbarRef={scrollbarRef}\r\n        setSize={setSize}\r\n        isReachingEnd={isReachingEnd}\r\n      />\r\n      <ChatBox\r\n        chat={chat}\r\n        onChangeChat={onChangeChat}\r\n        onSubmitForm={onSubmitForm}\r\n      />\r\n      <InviteChannelModal\r\n        show={showInviteChannelModal}\r\n        onCloseModal={onCloseModal}\r\n        setShowInviteChannelModal={setShowInviteChannelModal}\r\n      />\r\n      {dragOver && <DragOver>업로드</DragOver>}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Channel;\r\n"],"names":["workspace","channel","useParams","data","userData","useSWR","fetcher","channelsData","channelData","find","v","name","chatData","mutate","mutateChat","setSize","useSWRInfinite","index","onSuccess","length","setTimeout","scrollbarRef","current","scrollToBottom","channelMembersData","showInviteChannelModal","setShowInviteChannelModal","useState","dragOver","setDragOver","chat","onChangeChat","setChat","useInput","socket","useSocket","useRef","isReachingEnd","onSubmitForm","useCallback","e","preventDefault","console","log","trim","savedChat","prevChatData","unshift","id","content","UserId","User","ChannelId","Channel","createdAt","Date","then","axios","catch","error","onMessage","startsWith","getScrollHeight","getClientHeight","getScrollTop","getValues","useEffect","on","off","onClickInviteChannel","onCloseModal","onDrop","formData","FormData","dataTransfer","items","i","kind","file","getAsFile","append","files","localStorage","setItem","getTime","toString","onDragOver","to","chatSections","makeSection","flat","reverse","className","onClick","type","show"],"sourceRoot":""}
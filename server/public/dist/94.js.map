{"version":3,"file":"94.js","mappings":"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","sources":["webpack://sleact-ts-front/./pages/DirectMessage/styles.tsx","webpack://sleact-ts-front/./pages/DirectMessage/index.tsx"],"sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  height: calc(100vh - 38px);\r\n  flex-flow: column;\r\n  position: relative;\r\n`;\r\n\r\nexport const Header = styled.header`\r\n  height: 64px;\r\n  display: flex;\r\n  width: 100%;\r\n  --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\r\n  box-shadow: 0 1px 0 var(--saf-0);\r\n  padding: 20px 16px 20px 20px;\r\n  font-weight: bold;\r\n  align-items: center;\r\n  & img {\r\n    margin-right: 5px;\r\n  }\r\n`;\r\n","import fetcher from '@utils/fetcher';\r\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport gravatar from 'gravatar';\r\nimport { useParams } from 'react-router';\r\nimport ChatList from '@components/ChatList';\r\nimport ChatBox from '@components/ChatBox';\r\nimport useInput from '@hooks/useInput';\r\nimport axios from 'axios';\r\nimport { IDM } from '@typings/db';\r\nimport makeSection from '@utils/makeSection';\r\nimport Scrollbars from 'react-custom-scrollbars-2';\r\nimport useSWR from 'swr';\r\nimport useSWRInfinite from 'swr/infinite';\r\nimport useSocket from '@hooks/useSocket';\r\nimport { toast } from 'react-toastify';\r\nimport { DragOver } from '@pages/Channel/styles';\r\nimport { Container, Header } from '@pages/DirectMessage/styles';\r\n\r\nconst DirectMessage = () => {\r\n  const { workspace, id } = useParams<{ workspace: string; id: string }>();\r\n\r\n  // (워크스페이스에 초대된)유저 정보\r\n  const { data: userData, error } = useSWR(\r\n    `/api/workspaces/${workspace}/users/${id}`,\r\n    fetcher,\r\n  );\r\n\r\n  // 내 정보 (채팅할 때 누가 누구에게 보내는 명시)\r\n  const { data: myData } = useSWR(`/api/users`, fetcher);\r\n  const [chat, onChangeChat, setChat] = useInput('');\r\n\r\n  const {\r\n    data: chatData,\r\n    mutate: mutateChat,\r\n    setSize,\r\n  } = useSWRInfinite<IDM[]>(\r\n    (index) =>\r\n      `/api/workspaces/${workspace}/dms/${id}/chats?perPage=20&page=${\r\n        index + 1\r\n      }`,\r\n    fetcher,\r\n  );\r\n\r\n  const [socket] = useSocket(workspace); // 소켓 연결하기\r\n  const scrollbarRef = useRef<Scrollbars>(null);\r\n  const [dragOver, setDragOver] = useState(false);\r\n\r\n  const isEmpty = chatData?.[0]?.length === 0;\r\n  const isReachingEnd =\r\n    isEmpty ||\r\n    (chatData && chatData[chatData.length - 1]?.length < 20) ||\r\n    false;\r\n\r\n  const onSubmitForm = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      console.log('submit');\r\n      console.log('chat', chat);\r\n      if (chat?.trim() && chatData) {\r\n        // console.log('메시지 전송');\r\n        const savedChat = chat;\r\n        mutateChat((prevChatData) => {\r\n          // optimistic ui를 위해  mutate(ChatData) 변경\r\n          prevChatData?.[0].unshift({\r\n            id: (chatData[0][0]?.id || 0) + 1,\r\n            content: savedChat,\r\n            SenderId: myData.id,\r\n            Sender: myData,\r\n            ReceiverId: userData.id,\r\n            Receiver: userData,\r\n            createdAt: new Date(),\r\n          });\r\n          return prevChatData;\r\n        }, false).then(() => {\r\n          setChat('');\r\n          // 채팅시 스크롤바 제일 아래로\r\n          scrollbarRef.current?.scrollToBottom();\r\n        });\r\n        axios\r\n          .post(`/api/workspaces/${workspace}/dms/${id}/chats`, {\r\n            content: chat,\r\n          })\r\n          .then(() => {\r\n            mutateChat(); // 서버측에 채팅을 등록하고 받아옴\r\n          })\r\n          .catch(console.error);\r\n      }\r\n    },\r\n    [chat, chatData, myData, userData, workspace, id],\r\n  );\r\n\r\n  const onMessage = useCallback(\r\n    (data: IDM) => {\r\n      if (data.SenderId === Number(id) && myData.id !== Number(id)) {\r\n        mutateChat((chatData) => {\r\n          chatData?.[0].unshift(data);\r\n          return chatData;\r\n        }, false).then(() => {\r\n          if (scrollbarRef.current) {\r\n            if (\r\n              scrollbarRef.current.getScrollHeight() <\r\n              scrollbarRef.current.getClientHeight() +\r\n                scrollbarRef.current.getScrollTop() +\r\n                150\r\n            ) {\r\n              console.log('scrollToBottom!', scrollbarRef.current?.getValues());\r\n              setTimeout(() => {\r\n                scrollbarRef.current?.scrollToBottom();\r\n              }, 100);\r\n            } else {\r\n              toast.success('새 메시지가 도착했습니다.', {\r\n                onClick() {\r\n                  scrollbarRef.current?.scrollToBottom();\r\n                },\r\n                closeOnClick: true,\r\n              });\r\n            }\r\n          }\r\n        });\r\n      }\r\n    },\r\n    [id, myData, mutateChat],\r\n  );\r\n\r\n  // DM 채팅하기\r\n  useEffect(() => {\r\n    socket?.on('dm', onMessage);\r\n    return () => {\r\n      socket?.off('dm', onMessage);\r\n    };\r\n  }, [socket, onMessage]);\r\n\r\n  // 로딩시 스크롤바 제일 아래로\r\n  useEffect(() => {\r\n    if (chatData?.length === 1) {\r\n      scrollbarRef.current?.scrollToBottom();\r\n    }\r\n  }, [chatData]);\r\n\r\n  const onDrop = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      console.log(e);\r\n      const formData = new FormData();\r\n      if (e.dataTransfer.items) {\r\n        // Use DataTransferItemList interface to access the file(s)\r\n        for (let i = 0; i < e.dataTransfer.items.length; i++) {\r\n          // If dropped items aren't files, reject them\r\n          console.log(e.dataTransfer.items[i]);\r\n          if (e.dataTransfer.items[i].kind === 'file') {\r\n            const file = e.dataTransfer.items[i].getAsFile();\r\n            console.log('... file[' + i + '].name = ' + file.name);\r\n            formData.append('image', file);\r\n          }\r\n        }\r\n      } else {\r\n        // Use DataTransfer interface to access the file(s)\r\n        for (let i = 0; i < e.dataTransfer.files.length; i++) {\r\n          console.log(\r\n            '... file[' + i + '].name = ' + e.dataTransfer.files[i].name,\r\n          );\r\n          formData.append('image', e.dataTransfer.files[i]);\r\n        }\r\n      }\r\n      axios\r\n        .post(`/api/workspaces/${workspace}/dms/${id}/images`, formData)\r\n        .then(() => {\r\n          setDragOver(false);\r\n          localStorage.setItem(\r\n            `${workspace}-${id}`,\r\n            new Date().getTime().toString(),\r\n          );\r\n          mutateChat();\r\n        });\r\n    },\r\n    [workspace, id, mutateChat],\r\n  );\r\n\r\n  const onDragOver = useCallback((e) => {\r\n    e.preventDefault();\r\n    console.log(e);\r\n    setDragOver(true);\r\n  }, []);\r\n\r\n  if (!userData || !myData) {\r\n    return null;\r\n  }\r\n\r\n  if (error) {\r\n    return <div>{error?.response.data}</div>;\r\n  }\r\n\r\n  if (chatData === undefined) {\r\n    return <div>DM 메시지 불러오는중 ...</div>;\r\n  }\r\n\r\n  if (!userData || !myData) {\r\n    return null;\r\n  }\r\n\r\n  const chatSections = makeSection(\r\n    chatData ? ([] as IDM[]).concat(...chatData).reverse() : [],\r\n  );\r\n\r\n  return (\r\n    <Container onDrop={onDrop} onDragOver={onDragOver}>\r\n      <Header>\r\n        <img\r\n          src={gravatar.url(userData.email, { s: '24px', d: 'retro' })}\r\n          alt={userData.nickname}\r\n        />\r\n        <span>{userData.nickname}</span>\r\n      </Header>\r\n      <ChatList\r\n        chatSections={chatSections}\r\n        scrollbarRef={scrollbarRef}\r\n        setSize={setSize}\r\n        isReachingEnd={isReachingEnd}\r\n      />\r\n      <ChatBox\r\n        chat={chat}\r\n        onChangeChat={onChangeChat}\r\n        onSubmitForm={onSubmitForm}\r\n      />\r\n      {dragOver && <DragOver>업로드</DragOver>}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default DirectMessage;\r\n"],"names":["Container","Header","workspace","id","useParams","data","userData","error","useSWR","fetcher","myData","chat","onChangeChat","setChat","useInput","chatData","mutate","mutateChat","setSize","useSWRInfinite","index","socket","useSocket","scrollbarRef","useRef","dragOver","setDragOver","useState","isReachingEnd","length","onSubmitForm","useCallback","e","preventDefault","console","log","trim","savedChat","prevChatData","unshift","content","SenderId","Sender","ReceiverId","Receiver","createdAt","Date","then","current","scrollToBottom","axios","catch","onMessage","Number","getScrollHeight","getClientHeight","getScrollTop","getValues","setTimeout","toast","onClick","closeOnClick","useEffect","on","off","onDrop","formData","FormData","dataTransfer","items","i","kind","file","getAsFile","name","append","files","localStorage","setItem","getTime","toString","onDragOver","response","undefined","chatSections","makeSection","concat","reverse","src","gravatar","email","s","d","alt","nickname","ChatList","ChatBox"],"sourceRoot":""}
{"version":3,"file":"410.js","mappings":"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","sources":["webpack://sleact-ts-front/./components/ChatBox/styles.tsx","webpack://sleact-ts-front/./components/ChatBox/index.tsx","webpack://sleact-ts-front/./components/Chat/styles.tsx","webpack://sleact-ts-front/./components/Chat/index.tsx","webpack://sleact-ts-front/./components/ChatList/styles.tsx","webpack://sleact-ts-front/./components/ChatList/index.tsx","webpack://sleact-ts-front/./pages/Channel/styles.tsx","webpack://sleact-ts-front/./utils/makeSection.ts"],"sourcesContent":["import styled from '@emotion/styled';\r\nimport { MentionsInput } from 'react-mentions';\r\n\r\nexport const ChatArea = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  padding: 20px;\r\n  padding-top: 0;\r\n`;\r\n\r\nexport const Form = styled.form`\r\n  color: rgb(29, 28, 29);\r\n  font-size: 15px;\r\n  width: 100%;\r\n  border-radius: 4px;\r\n  border: 1px solid rgb(29, 28, 29);\r\n`;\r\n\r\nexport const MentionsTextarea = styled(MentionsInput)`\r\n  font-family: Slack-Lato, appleLogo, sans-serif;\r\n  font-size: 15px;\r\n  padding: 8px 9px;\r\n  width: 100%;\r\n  resize: none;\r\n  & strong {\r\n    background: skyblue;\r\n  }\r\n  & textarea {\r\n    width: 100%;\r\n    height: 44px;\r\n    padding: 9px 10px !important;\r\n    outline: none !important;\r\n    border-radius: 4px !important;\r\n    resize: none !important;\r\n    line-height: 22px;\r\n    border: none;\r\n  }\r\n  & ul {\r\n    border: 1px solid lightgray;\r\n    max-height: 200px;\r\n    overflow-y: auto;\r\n    padding: 9px 10px;\r\n    background: white;\r\n    border-radius: 4px;\r\n    width: 150px;\r\n  }\r\n`;\r\n\r\nexport const Toolbox = styled.div`\r\n  position: relative;\r\n  background: rgb(248, 248, 248);\r\n  height: 41px;\r\n  display: flex;\r\n  border-top: 1px solid rgb(221, 221, 221);\r\n  align-items: center;\r\n  border-bottom-left-radius: 4px;\r\n  border-bottom-right-radius: 4px;\r\n`;\r\n\r\nexport const SendButton = styled.button`\r\n  position: absolute;\r\n  right: 5px;\r\n  top: 5px;\r\n`;\r\n\r\nexport const EachMention = styled.button<{ focus: boolean }>`\r\n  padding: 4px 20px;\r\n  background: transparent;\r\n  border: none;\r\n  display: flex;\r\n  align-items: center;\r\n  color: rgb(28, 29, 28);\r\n  width: 100%;\r\n  & img {\r\n    margin-right: 5px;\r\n  }\r\n  ${({ focus }) =>\r\n    focus &&\r\n    `\r\n    background: #1264a3;\r\n    color: white;\r\n  `};\r\n`;\r\n","import { IUser } from '@typings/db';\r\nimport fetcher from '@utils/fetcher';\r\nimport React, { useCallback, useEffect, useRef, VFC } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport useSWR from 'swr';\r\nimport {\r\n  ChatArea,\r\n  EachMention,\r\n  Form,\r\n  MentionsTextarea,\r\n  SendButton,\r\n  Toolbox,\r\n} from './styles';\r\n\r\nimport autosize from 'autosize';\r\nimport gravatar from 'gravatar';\r\nimport { Mention, SuggestionDataItem } from 'react-mentions';\r\n\r\ninterface Props {\r\n  chat: string;\r\n  onSubmitForm: (e: any) => void;\r\n  onChangeChat: (e: any) => void;\r\n  placeholder?: string;\r\n}\r\n\r\nconst ChatBox: VFC<Props> = ({\r\n  chat,\r\n  onSubmitForm,\r\n  onChangeChat,\r\n  placeholder,\r\n}) => {\r\n  const { workspace } = useParams<{ workspace: string }>();\r\n  const {\r\n    data: userData,\r\n    error,\r\n    mutate,\r\n  } = useSWR<IUser | false>('/api/users', fetcher, {\r\n    dedupingInterval: 2000, // 2초\r\n  });\r\n  const { data: memberData } = useSWR<IUser[]>(\r\n    userData ? `/api/workspaces/${workspace}/members` : null,\r\n    fetcher,\r\n  );\r\n\r\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (textareaRef.current) {\r\n      autosize(textareaRef.current);\r\n    }\r\n  }, []);\r\n\r\n  const onKeydownChat = useCallback(\r\n    (e) => {\r\n      if (e.key === 'Enter') {\r\n        if (!e.shiftKey) {\r\n          // console.log({ shiftKey: false });\r\n          onSubmitForm(e);\r\n        }\r\n      }\r\n    },\r\n    [onSubmitForm],\r\n  );\r\n\r\n  const renderSuggestion = useCallback(\r\n    (\r\n      suggestion: SuggestionDataItem,\r\n      search: string,\r\n      highlightedDisplay: React.ReactNode,\r\n      index: number,\r\n      focuse: boolean,\r\n    ): React.ReactNode => {\r\n      if (!memberData) return;\r\n      return (\r\n        <EachMention focus={focuse}>\r\n          <img\r\n            src={gravatar.url(memberData[index].email, {\r\n              s: '20px',\r\n              d: 'retro',\r\n            })}\r\n            alt={memberData[index].nickname}\r\n          />\r\n          <span>{highlightedDisplay}</span>\r\n        </EachMention>\r\n      );\r\n    },\r\n    [],\r\n  );\r\n  return (\r\n    <ChatArea>\r\n      <Form onSubmit={onSubmitForm}>\r\n        <MentionsTextarea\r\n          id=\"editor-chat\"\r\n          value={chat}\r\n          onChange={onChangeChat}\r\n          onKeyDown={onKeydownChat}\r\n          placeholder={placeholder}\r\n          inputRef={textareaRef}\r\n          allowSuggestionsAboveCursor\r\n        >\r\n          <Mention\r\n            appendSpaceOnAdd\r\n            trigger=\"@\"\r\n            data={\r\n              memberData?.map((v) => ({ id: v.id, display: v.nickname })) || []\r\n            }\r\n            renderSuggestion={renderSuggestion}\r\n          />\r\n        </MentionsTextarea>\r\n        <Toolbox>\r\n          <SendButton\r\n            className={\r\n              'c-button-unstyled c-icon_button c-icon_button--light c-icon_button--size_medium c-texty_input__button c-texty_input__button--send' +\r\n              (chat?.trim() ? '' : ' c-texty_input__button--disabled')\r\n            }\r\n            data-qa=\"texty_send_button\"\r\n            aria-label=\"Send message\"\r\n            data-sk=\"tooltip_parent\"\r\n            type=\"submit\"\r\n            disabled={!chat?.trim()}\r\n          >\r\n            <i className=\"c-icon c-icon--paperplane-filled\" />\r\n          </SendButton>\r\n        </Toolbox>\r\n      </Form>\r\n    </ChatArea>\r\n  );\r\n};\r\n\r\nexport default ChatBox;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const ChatWrapper = styled.div`\r\n  display: flex;\r\n  padding: 8px 20px;\r\n\r\n  &:hover {\r\n    background: #eee;\r\n  }\r\n\r\n  & .chat-img {\r\n    display: flex;\r\n    width: 36px;\r\n    margin-right: 8px;\r\n\r\n    & img {\r\n      width: 36px;\r\n      height: 36px;\r\n    }\r\n  }\r\n\r\n  & .chat-text {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    flex: 1;\r\n\r\n    & p {\r\n      flex: 0 0 100%;\r\n      margin: 0;\r\n    }\r\n  }\r\n\r\n  & .chat-user {\r\n    display: flex;\r\n    flex: 0 0 100%;\r\n    align-items: center;\r\n\r\n    & > b {\r\n      margin-right: 5px;\r\n    }\r\n\r\n    & > span {\r\n      font-size: 12px;\r\n    }\r\n  }\r\n\r\n  & a {\r\n    text-decoration: none;\r\n    color: deepskyblue;\r\n  }\r\n`;\r\n","import React, { memo, useMemo, VFC } from 'react';\r\nimport gravatar from 'gravatar';\r\nimport { ChatWrapper } from './styles';\r\nimport { IChat, IDM, IUser } from '@typings/db';\r\nimport dayjs from 'dayjs';\r\nimport regexifyString from 'regexify-string';\r\nimport { Link, useParams } from 'react-router-dom';\r\n\r\ninterface Props {\r\n  data: IDM | IChat;\r\n}\r\n\r\nconst BACK_URL =\r\n  process.env.NODE_ENV === 'development'\r\n    ? 'http://localhost:3095'\r\n    : 'https://sleact.nodebird.com';\r\nconst Chat: VFC<Props> = ({ data }) => {\r\n  const { workspace } = useParams<{ workspace: string; channel: string }>();\r\n  const user = 'Sender' in data ? data.Sender : data.User;\r\n\r\n  // @[리뽀바라기](1)\r\n  // 형태: @[닉네임](dmId)\r\n  const result = useMemo(\r\n    () =>\r\n      // uploads\\\\서버주소\r\n      data.content.startsWith('uploads\\\\') ? (\r\n        <img src={`${BACK_URL}/${data.content}`} style={{ maxHeight: 200 }} />\r\n      ) : (\r\n        regexifyString({\r\n          input: data.content,\r\n          pattern: /@\\[(.+?)\\]\\((\\d+?)\\)|\\n/g,\r\n          decorator(match, index) {\r\n            const arr: string[] | null = match.match(/@\\[(.+?)]\\((\\d+?)\\)/)!;\r\n            console.log('arr', arr);\r\n            if (arr) {\r\n              // 닉네임(arr[1]), dmId(arr[2]) 탐색\r\n              return (\r\n                <Link\r\n                  key={match + index}\r\n                  to={`/workspace/${workspace}/dm/${arr[2]}`}\r\n                >\r\n                  @{arr[1]}\r\n                </Link>\r\n              );\r\n            }\r\n            // 줄바꿈 적용\r\n            return <br key={index} />;\r\n          },\r\n        })\r\n      ),\r\n    [data.content],\r\n  );\r\n\r\n  return (\r\n    <ChatWrapper>\r\n      <div className=\"chat-img\">\r\n        <img\r\n          src={gravatar.url(user.email, { s: '36px', d: 'retro' })}\r\n          alt={user.nickname}\r\n        />\r\n      </div>\r\n      <div className=\"chat-text\">\r\n        <div className=\"chat-user\">\r\n          <b>{user.nickname}</b>\r\n          <span>{dayjs(data.createdAt).format('h:mm A')}</span>\r\n        </div>\r\n        <p>{result}</p>\r\n      </div>\r\n    </ChatWrapper>\r\n  );\r\n};\r\n\r\nexport default memo(Chat);\r\n","import styled from '@emotion/styled';\r\n\r\nexport const ChatZone = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  flex: 1;\r\n`;\r\n\r\nexport const Section = styled.section`\r\n  margin-top: 20px;\r\n  border-top: 1px solid #eee;\r\n`;\r\n\r\nexport const StickyHeader = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex: 1;\r\n  width: 100%;\r\n  position: sticky;\r\n  top: 14px;\r\n  & button {\r\n    font-weight: bold;\r\n    font-size: 13px;\r\n    height: 28px;\r\n    line-height: 27px;\r\n    padding: 0 16px;\r\n    z-index: 2;\r\n    --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\r\n    box-shadow: 0 0 0 1px var(--saf-0), 0 1px 3px 0 rgba(0, 0, 0, 0.08);\r\n    border-radius: 24px;\r\n    position: relative;\r\n    top: -13px;\r\n    background: white;\r\n    border: none;\r\n    outline: none;\r\n  }\r\n`;\r\n","import Chat from '@components/Chat';\r\nimport { IChat, IDM } from '@typings/db';\r\nimport React, { RefObject, useCallback, VFC } from 'react';\r\nimport { Scrollbars } from 'react-custom-scrollbars-2';\r\nimport { ChatZone, Section, StickyHeader } from './styles';\r\n\r\ninterface Props {\r\n  chatSections: { [key: string]: (IDM | IChat)[] };\r\n  setSize: (\r\n    f: (size: number) => number,\r\n  ) => Promise<(IDM | IChat)[][] | undefined>;\r\n  isReachingEnd: boolean;\r\n  scrollbarRef: RefObject<Scrollbars>;\r\n}\r\n\r\nconst CharList: VFC<Props> = ({\r\n  chatSections,\r\n  setSize,\r\n  scrollbarRef,\r\n  isReachingEnd,\r\n}) => {\r\n  const onScroll = useCallback(\r\n    (values) => {\r\n      if (values.scrollTop === 0 && !isReachingEnd) {\r\n        // !isReachingEnd: 끝에 도달하면 (해당) 데이터를 불러올 필요가 없음\r\n        console.log('가장 위');\r\n        // 이전 데이터 추가 로딩\r\n        setSize((prevSize) => prevSize + 1).then(() => {\r\n          // 페이지수 변경 (페이지를 하나 더 불러오기)\r\n          // 스크롤 위치 유지\r\n          if (scrollbarRef?.current) {\r\n          }\r\n          scrollbarRef.current?.scrollTop(\r\n            scrollbarRef.current?.getScrollHeight() - values.scrollHeight,\r\n          );\r\n        });\r\n      }\r\n    },\r\n    [setSize, isReachingEnd],\r\n  );\r\n  // console.log('chatData', chatSections);\r\n  return (\r\n    <ChatZone>\r\n      <Scrollbars\r\n        className=\"scrollbars\"\r\n        autoHide\r\n        ref={scrollbarRef}\r\n        onScrollFrame={onScroll}\r\n      >\r\n        {Object.entries(chatSections).map(([date, chats]) => {\r\n          return (\r\n            <Section className={`section-${date}`} key={date}>\r\n              <StickyHeader>\r\n                <button>{date}</button>\r\n              </StickyHeader>\r\n              {chats?.map((chat) => (\r\n                <Chat key={chat.id} data={chat} />\r\n              ))}\r\n            </Section>\r\n          );\r\n        })}\r\n      </Scrollbars>\r\n    </ChatZone>\r\n  );\r\n};\r\n\r\nexport default CharList;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  height: calc(100vh - 38px);\r\n  flex-flow: column;\r\n  position: relative;\r\n`;\r\n\r\nexport const Header = styled.header`\r\n  height: 64px;\r\n  display: flex;\r\n  width: 100%;\r\n  --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\r\n  box-shadow: 0 1px 0 var(--saf-0);\r\n  padding: 20px 16px 20px 20px;\r\n  font-weight: bold;\r\n  align-items: center;\r\n\r\n  & .header-right {\r\n    display: flex;\r\n    flex: 1;\r\n    justify-content: flex-end;\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\nexport const DragOver = styled.div`\r\n  position: absolute;\r\n  top: 64px;\r\n  left: 0;\r\n  width: 100%;\r\n  height: calc(100% - 64px);\r\n  background: white;\r\n  opacity: 0.7;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 40px;\r\n`;\r\n\r\n","import { IChat, IDM } from '@typings/db';\r\nimport dayjs from 'dayjs';\r\n\r\nexport default function makeSection(chatList: (IDM | IChat)[]) {\r\n  const sections: { [key: string]: (IDM | IChat)[] } = {};\r\n  chatList.forEach((chat) => {\r\n    const monthDate = dayjs(chat.createdAt).format('YYYY-MM-DD');\r\n    if (Array.isArray(sections[monthDate])) {\r\n      sections[monthDate].push(chat);\r\n    } else {\r\n      sections[monthDate] = [chat];\r\n    }\r\n    sections[monthDate];\r\n  });\r\n  // console.log('sections', sections);\r\n  return sections;\r\n}\r\n\r\n//[]\r\n"],"names":["ChatArea","Form","MentionsTextarea","MentionsInput","Toolbox","SendButton","EachMention","focus","chat","onSubmitForm","onChangeChat","placeholder","workspace","useParams","data","userData","error","mutate","useSWR","fetcher","dedupingInterval","memberData","textareaRef","useRef","useEffect","current","autosize","onKeydownChat","useCallback","e","key","shiftKey","renderSuggestion","suggestion","search","highlightedDisplay","index","focuse","src","gravatar","email","s","d","alt","nickname","onSubmit","id","value","onChange","onKeyDown","inputRef","allowSuggestionsAboveCursor","appendSpaceOnAdd","trigger","map","v","display","className","trim","type","disabled","ChatWrapper","Chat","user","Sender","User","result","useMemo","content","startsWith","style","maxHeight","regexifyString","input","pattern","decorator","match","arr","console","log","to","dayjs","createdAt","format","memo","ChatZone","Section","StickyHeader","chatSections","setSize","scrollbarRef","isReachingEnd","onScroll","values","scrollTop","prevSize","then","getScrollHeight","scrollHeight","autoHide","ref","onScrollFrame","Object","entries","date","chats","Container","Header","DragOver","makeSection","chatList","sections","forEach","monthDate","Array","isArray","push"],"sourceRoot":""}